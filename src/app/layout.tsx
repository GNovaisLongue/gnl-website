import "../styles/globals.css";
import { Inter } from "next/font/google";
import { Metadata } from "next";

import NextTopLoader from "nextjs-toploader";
import { Analytics } from "@vercel/analytics/react";

import { Suspense } from "react";
import Nav from "@/components/ui/nav";

// const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Next App",
  description:
    "Generated by create next app. Focused on storing different exercises. What exercises? simple exercises that could be asked during some kind of interview or just to simply stimulate the knowledge.",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className="[color-scheme:dark]">
      <body className="bg-gray-1100 overflow-y-scroll pb-20">
        <NextTopLoader />
        <Suspense fallback="...loading">
          <Nav />
        </Suspense>
        {/* className="lg:pl-64" */}
        <div>
          {/* lg:px-4 lg:pt-6 lg:pb-4 */}
          <div className="mx-auto max-w-6xl space-y-4 px-2 pt-16">
            <div className="bg-vc-border-gradient rounded-lg p-px shadow-lg shadow-black/20">
              {/* lg:p-4 */}
              <div className="rounded-lg bg-black p-3.5">{children}</div>
            </div>
            <footer>
              <b>Will be a Footer Soon</b>
            </footer>
          </div>
        </div>
        {/* <Analytics /> */}
      </body>
    </html>
  );
}

// export async function getServerSideProps(context: any) {
//   const session = await getServerSession(context.req, context.res, authOptions);
//   console.log("!!!!!!!Main root ", session);

//   if (!session) {
//     return {
//       redirect: {
//         destination: "/",
//         permanent: false,
//       },
//     };
//   }

//   return {
//     props: {
//       session,
//     },
//   };
// }

// export async function getServerSideProps(
//   context:
//     | any
//     | NextApiRequest
//     | (IncomingMessage & { cookies: Partial<{ [key: string]: string }> })
// ) {
//   const session = await getServerSession(context);

//   if (!session) {
//     return {
//       redirect: {
//         destination: "/login", // Redirect to the login page if the user is not authenticated
//         permanent: false,
//       },
//     };
//   }

//   // Other server-side logic can be performed here

//   return {
//     props: { session },
//   };
// }
